const { Client, LocalAuth } = require("whatsapp-web.js");
const qrcode = require("qrcode-terminal");
const mongoose = require("mongoose")
const User = require("./User")

mongoose
    .connect("mongodb://localhost:27017/hicmet")
    .then(() => {
        console.log("Mongodb OK");
    })
    .catch((err) => {
        console.log("Mongodb Error", err);
    });

const client = new Client({
    authStrategy: new LocalAuth(),
    puppeteer: {
        headless: true,
        timeout: 60000,
        args: ['--no-sandbox', '--disable-setuid-sandbox'], // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏
    },
});

client.on("qr", (qr) => {
    console.log("QR-–∫–æ–¥ –ø–æ–ª—É—á–µ–Ω. –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.");
    qrcode.generate(qr, { small: true });
});

client.on("authenticated", (session) => {
    console.log(
        "Authenticated with session:",
        session ? JSON.stringify(session) : "undefined"
    );
});

client.on("auth_failure", (msg) => {
    console.error("Authentication failed:", msg);
});

client.on("disconnected", (reason) => {
    console.log("Client was logged out:", reason);
});

client.on("ready", () => {
    console.log("Client is ready!");
});

let uniqueUsersToday = new Set(); // –•—Ä–∞–Ω–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
let lastCheckDate = new Date().toLocaleDateString(); // –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞
let userStates = {};

function resetCountersIfNeeded() {
    const currentDate = new Date().toLocaleDateString();
    if (lastCheckDate !== currentDate) {
        // –ï—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        uniqueUsersToday.clear();
        messagesToTelegramToday = 0;
        lastCheckDate = currentDate;
    }
}

const formatCurrency = (amount) => {
    if (amount === undefined || amount === null) {
        return "0 —Ç–µ–Ω–≥–µ"; // –ò–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ
    return `${String(amount).replace(/\B(?=(\d{3})+(?!\d))/g, " ")}`;
};

const welcomeMessage = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n–Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç—É Jenil Jina –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Hickmet.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –ò–ò–ù –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–∞–ª–∞–Ω—Å–∞"
const notIIN = "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –≤–∞—à–µ–≥–æ –ò–ò–ù –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã –≤–≤–µ–ª–∏ –ò–ò–ù"
const notIIN2 = "–ï—Å–ª–∏ '–ù–µ—Ç', –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ò–ò–ù —Å–Ω–æ–≤–∞ üòä.\n–ï—Å–ª–∏ '–î–∞', –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ üëá:\nwa.me/77003152211"
const addIIN = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ò–ò–ù, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö üìÅ"
const addIINBalance = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–∞–ª–∞–Ω—Å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è üíµ"
const addIINRes = (iin, balance) => {
    return `–í –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å‚ùó\n–ò–ò–ù: ${iin} üÜî\n–ë–∞–ª–∞–Ω—Å: ${formatCurrency(balance)} üí∏`
}
const changeIIN = "–í–≤–µ–¥–∏—Ç–µ –ò–ò–ù –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ–π –±–∞–ª–∞–Ω—Å —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å‚úèÔ∏è"
const changeIINBalance = "–í–≤–µ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–∞–≤–Ω–∏—è ‚úèÔ∏è"
const changeIINRes = (iin, balance) => {
    return `–ë–∞–ª–Ω–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω‚ùó\n–ò–ò–ù: ${iin} üÜî\n–ë–∞–ª–∞–Ω—Å: ${formatCurrency(balance)} üí∏`
}
const delIIN = "–í–≤–µ–¥–∏—Ç–µ –ò–ò–ù –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å üóëÔ∏è"
const delIINRes = (iin, balance) => {
    return `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ωüö´\n–ò–ò–ù: ${iin}\n–ë–∞–ª–∞–Ω—Å: ${formatCurrency(balance)} üí∏`
}


client.on("message", async (msg) => {
    const chatId = msg.from;
    const messageText = msg.body.trim();

    resetCountersIfNeeded();

    const isNewUser = !uniqueUsersToday.has(chatId);
    uniqueUsersToday.add(chatId);

    if (isNewUser) {
        client.sendMessage(chatId, welcomeMessage);
        return;
    }

    if (!userStates[chatId]) {
        userStates[chatId] = { type: null, step: null, iin: null, balance: null };
    }

    if (messageText.startsWith("/add_balance")) {
        userStates[chatId] = { type: "add", step: "awaitingIIN", iin: null, balance: null };
        client.sendMessage(chatId, addIIN);
        return;
    }

    if (messageText.startsWith("/change")) {
        userStates[chatId] = { type: "change", step: "awaitingIIN", iin: null, balance: null };
        client.sendMessage(chatId, changeIIN);
        return;
    }

    if (messageText.startsWith("/delete")) {
        userStates[chatId] = { type: "delete", step: "awaitingIIN", iin: null, balance: null };
        client.sendMessage(chatId, delIIN);
        return;
    }

    if (userStates[chatId].step === "awaitingIIN") {
        if (/^\d{12}$/.test(messageText)) {
            if (userStates[chatId].type === "add") {
                const user = await User.findOne({iin: messageText})
                if (user) {
                    client.sendMessage(chatId, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–∫–æ–π –ò–ò–ù —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
                    userStates[chatId] = { type: null, step: null, iin: null, balance: null }; // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    return;
                } else {
                    client.sendMessage(chatId, addIINBalance)
                    userStates[chatId].iin = messageText;
                    userStates[chatId].step = "awaitingBalance";
                    return;
                }
            }
            if (userStates[chatId].type === "change") {
                const user = await User.findOne({iin: messageText})
                if (!user) {
                    client.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ò–ò–ù ${messageText} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`);
                    userStates[chatId] = { type: null, step: null, iin: null, balance: null }; // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    return;
                } else {
                    client.sendMessage(chatId, changeIINBalance)
                    userStates[chatId].iin = messageText;
                    userStates[chatId].step = "awaitingBalance";
                    return;
                }
            }
            if (userStates[chatId].type === "delete") {
                const user = await User.findOne({iin: messageText})
                if (!user) {
                    client.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ò–ò–ù ${messageText} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`);
                    userStates[chatId] = { type: null, step: null, iin: null, balance: null }; // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    return
                } else {
                    await User.deleteOne({ iin: messageText });
                    client.sendMessage(chatId, delIINRes(user.iin, user.balance));
                    userStates[chatId] = { type: null, step: null, iin: null, balance: null }; // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    return
                }
            }
        } else {
            client.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ò–ù. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 12-–∑–Ω–∞—á–Ω—ã–π –ò–ò–ù.");
        }
        return;
    }

    if (userStates[chatId].step === "awaitingBalance") {
        if (/^\d+$/.test(messageText)) {
            userStates[chatId].balance = Number(messageText);
            const { type, iin, balance } = userStates[chatId];

            if (type === "add") {
                const newUser = new User({
                    iin,
                    balance
                })
                await newUser.save()
                client.sendMessage(chatId, addIINRes(iin, balance));
            } else {
                const user = await User.findOne({ iin });

                if (!user) {
                    client.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –ò–ò–ù-–æ–º –Ω–µ—Ç ${iin}`);
                } else {
                    user.balance = balance
                    await user.save();
                    client.sendMessage(chatId, changeIINRes(iin, balance));
                }
            }

            userStates[chatId] = { type: null, step: null, iin: null, balance: null }; // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        } else {
            client.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.");
        }
        return;
    }

    if (messageText) {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Å—Ç–æ—è—â–µ–µ —Ç–æ–ª—å–∫–æ –∏–∑ 12 —Ü–∏—Ñ—Ä (–ò–ò–ù)
        if (/^\d{12}$/.test(messageText)) {
            const user = await User.findOne({iin: messageText})
            if (!user) {
                client.sendMessage(chatId, notIIN);
                client.sendMessage(chatId, notIIN2);
                return;
            }
            client.sendMessage(chatId, `–¢–µ–∫—É—â–∏–∏ –±–∞–ª–∞–Ω—Å –≤ –≤–∞—à–µ–π –∫–æ–ø–∏–ª–∫–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: ${user.balance}—Ç–≥ üí∏`);
            return;
        }

        if (/^\d+$/.test(messageText) && messageText.length !== 12) {
            client.sendMessage(chatId, notIIN);
            client.sendMessage(chatId, notIIN2);
            return;
        }

        client.sendMessage(chatId, "–ü—Ä–æ—à—É –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –ò–ò–ù –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ üíµ")
    }
});

client.initialize();
