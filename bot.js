const { Client, LocalAuth } = require("whatsapp-web.js");
const qrcode = require("qrcode-terminal");
const mongoose = require("mongoose")
const User = require("./User")

mongoose
    .connect("mongodb://localhost:27017/hicmet")
    .then(() => {
        console.log("Mongodb OK");
    })
    .catch((err) => {
        console.log("Mongodb Error", err);
    });

const client = new Client({
    authStrategy: new LocalAuth(),
    puppeteer: {
        headless: true,
        timeout: 60000,
        args: ['--no-sandbox', '--disable-setuid-sandbox'], // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏
    },
});

client.on("qr", (qr) => {
    console.log("QR-–∫–æ–¥ –ø–æ–ª—É—á–µ–Ω. –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.");
    qrcode.generate(qr, { small: true });
});

client.on("authenticated", (session) => {
    console.log(
        "Authenticated with session:",
        session ? JSON.stringify(session) : "undefined"
    );
});

client.on("auth_failure", (msg) => {
    console.error("Authentication failed:", msg);
});

client.on("disconnected", (reason) => {
    console.log("Client was logged out:", reason);
});

client.on("ready", () => {
    console.log("Client is ready!");
});

let uniqueUsersToday = new Set(); // –•—Ä–∞–Ω–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
let lastCheckDate = new Date().toLocaleDateString(); // –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞
let userStates = {};

function resetCountersIfNeeded() {
    const currentDate = new Date().toLocaleDateString();
    if (lastCheckDate !== currentDate) {
        // –ï—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        uniqueUsersToday.clear();
        messagesToTelegramToday = 0;
        lastCheckDate = currentDate;
    }
}

const formatCurrency = (amount) => {
    if (amount === undefined || amount === null) {
        return "0 —Ç–µ–Ω–≥–µ"; // –ò–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ
    return `${String(amount).replace(/\B(?=(\d{3})+(?!\d))/g, " ")}`;
};

const welcomeMessage = "–ê—Å—Å–∞–ª—è–º—É –∞–ª–µ–π–∫—É–º \n–ú–µ–Ω ‚Äì Hickmet –∫–æ–º–ø–∞–Ω–∏—è—Å—ã–Ω—ã“£ Jenil Jina –∂–∏–Ω–∞“õ –∂“Ø–π–µ—Å—ñ –±–æ–π—ã–Ω—à–∞ –≤–∏—Ä—Ç—É–∞–ª–¥—ã –∫”©–º–µ–∫—à—ñ—Å—ñ–º—ñ–Ω. “ö–∞–∑—ñ—Ä–≥—ñ —É–∞“õ—ã—Ç—Ç–∞ –±—ñ–∑–¥—ñ“£ —Å–∞–π—Ç ”©“£–¥–µ–ª—É “Ø—Å—Ç—ñ–Ω–¥–µ, ”©–∑ –±–∞–ª–∞–Ω—Å—ã“£—ã–∑–¥—ã –∫–µ–∑ –∫–µ–ª–≥–µ–Ω —É–∞“õ—ã—Ç—Ç–∞ —Ç–µ–∫—Å–µ—Ä—É “Ø—à—ñ–Ω —á–∞—Ç-–±–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—Ç—ã“õ. \n\n–®–æ—Ç—ã“£—ã–∑–¥—ã 24 —Å–∞“ì–∞—Ç —ñ—à—ñ–Ω–¥–µ —Ç–æ–ª—ã“õ—Ç—ã—Ä“ì–∞–Ω –∂–∞“ì–¥–∞–π–¥–∞, –æ–ª –∂“Ø–π–µ–¥–µ –±—ñ—Ä–¥–µ–Ω –∫”©—Ä—ñ–Ω–±–µ—É—ñ –º“Ø–º–∫—ñ–Ω. –ñ–∞“£–∞—Ä—Ç—ã–ª“ì–∞–Ω —Å—É–º–º–∞ –∫”©–ª–µ–º—ñ –∫–µ–ª–µ—Å—ñ –∫“Ø–Ω—ñ –∫”©—Ä—Å–µ—Ç—ñ–ª–µ–¥—ñ."
const notIIN = "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, —Å—ñ–∑–¥—ñ“£ –ñ–°–ù –±–∞–∑–∞–¥–∞ —Ç–∞–±—ã–ª–º–∞–¥—ã.\n–ñ–°–ù –¥“±—Ä—ã—Å –∂–∞–∑—ã–ª“ì–∞–Ω—ã–Ω “õ–∞–π—Ç–∞ —Ç–µ–∫—Å–µ—Ä—ñ–ø –∫”©—Ä—ñ“£—ñ–∑.";
const notIIN2 = "–ï–≥–µ—Ä “õ–∞—Ç–µ –µ–Ω–≥—ñ–∑—Å–µ“£—ñ–∑, –æ–Ω—ã “õ–∞–π—Ç–∞ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ üòä.\n–ï–≥–µ—Ä —Å—ñ–∑ –ñ–°–ù-–¥—ñ –¥“±—Ä—ã—Å –µ–Ω–≥—ñ–∑–≥–µ–Ω –±–æ–ª—Å–∞“£—ã–∑, –±—ñ—Ä–∞“õ –æ–ª –±—ñ–∑–¥—ñ“£ –±–∞–∑–∞–¥–∞–Ω —Ç–∞–±—ã–ª–º–∞—Å–∞, —Ç”©–º–µ–Ω–¥–µ–≥—ñ —Å—ñ–ª—Ç–µ–º–µ –∞—Ä“õ—ã–ª—ã –º–µ–Ω–µ–¥–∂–µ—Ä–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑üëá:\nwa.me//7003182211";
const addIIN = "–î–µ—Ä–µ–∫“õ–æ—Ä“ì–∞ “õ–æ—Å—É “Ø—à—ñ–Ω –ñ–°–ù –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ üìÅ";
const addIINBalance = "“ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã “õ–æ—Å—É “Ø—à—ñ–Ω –æ–Ω—ã“£ –±–∞–ª–∞–Ω—Å—ã–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ üíµ";
const addIINRes = (iin, balance) => {
    return `–î–µ—Ä–µ–∫“õ–æ—Ä“ì–∞ “õ–æ–ª–¥–∞–Ω—É—à—ã “õ–æ—Å—ã–ª–¥—ã‚ùó\n–ñ–°–ù: ${iin} üÜî\n–ë–∞–ª–∞–Ω—Å: ${formatCurrency(balance)} üí∏`;
};
const changeIIN = "–ë–∞–ª–∞–Ω—Å—ã–Ω ”©–∑–≥–µ—Ä—Ç–∫—ñ“£—ñ–∑ –∫–µ–ª–µ—Ç—ñ–Ω “õ–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ –ñ–°–ù –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑‚úèÔ∏è";
const changeIINBalance = "“ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ –±–∞–ª–∞–Ω—Å—ã–Ω ”©–∑–≥–µ—Ä—Ç—É “Ø—à—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ ‚úèÔ∏è";
const changeIINRes = (iin, balance) => {
    return `“ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ –±–∞–ª–∞–Ω—Å—ã ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ‚ùó\n–ñ–°–ù: ${iin} üÜî\n–ë–∞–ª–∞–Ω—Å: ${formatCurrency(balance)} üí∏`;
};
const delIIN = "–ñ–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω “õ–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ –ñ–°–ù –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ üóëÔ∏è";
const delIINRes = (iin, balance) => {
    return `“ö–æ–ª–¥–∞–Ω—É—à—ã —Å”ô—Ç—Ç—ñ –∂–æ–π—ã–ª–¥—ãüö´\n–ñ–°–ù: ${iin}\n–ë–∞–ª–∞–Ω—Å: ${formatCurrency(balance)} üí∏`;
};
const replaceMessage = "“ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç –∞–ª“ì—ã“£—ã–∑ –∫–µ–ª—Å–µ, —Ç”©–º–µ–Ω–¥–µ–≥—ñ —Å—ñ–ª—Ç–µ–º–µ –∞—Ä“õ—ã–ª—ã ”©—Ç—ñ–ø –º–µ–Ω–µ–¥–∂–µ—Ä–≥–µ –∂–∞–∑—Å–∞“£—ã–∑ –±–æ–ª–∞–¥—ã:\n\nhttps://wa.me/77003182211"


client.on("message", async (msg) => {
    const chatId = msg.from;
    const messageText = msg.body.trim();

    resetCountersIfNeeded();

    const isNewUser = !uniqueUsersToday.has(chatId);
    uniqueUsersToday.add(chatId);

    if (isNewUser) {
        client.sendMessage(chatId, welcomeMessage);
        return;
    }

    if (!userStates[chatId]) {
        userStates[chatId] = { type: null, step: null, iin: null, balance: null };
    }

    if (messageText.startsWith("/add_balance")) {
        userStates[chatId] = { type: "add", step: "awaitingIIN", iin: null, balance: null };
        client.sendMessage(chatId, addIIN);
        return;
    }

    if (messageText.startsWith("/change")) {
        userStates[chatId] = { type: "change", step: "awaitingIIN", iin: null, balance: null };
        client.sendMessage(chatId, changeIIN);
        return;
    }

    if (messageText.startsWith("/delete")) {
        userStates[chatId] = { type: "delete", step: "awaitingIIN", iin: null, balance: null };
        client.sendMessage(chatId, delIIN);
        return;
    }

    if (userStates[chatId].step === "awaitingIIN") {
        if (/^\d{12}$/.test(messageText)) {
            if (userStates[chatId].type === "add") {
                const user = await User.findOne({iin: messageText})
                if (user) {
                    client.sendMessage(chatId, "–ú“±–Ω–¥–∞–π –ñ–°–ù –¥–µ—Ä–µ–∫“õ–æ—Ä–¥–∞ –±–∞—Ä!");
                    userStates[chatId] = { type: null, step: null, iin: null, balance: null }; // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    return;
                } else {
                    client.sendMessage(chatId, addIINBalance)
                    userStates[chatId].iin = messageText;
                    userStates[chatId].step = "awaitingBalance";
                    return;
                }
            }
            if (userStates[chatId].type === "change") {
                const user = await User.findOne({iin: messageText})
                if (!user) {
                    client.sendMessage(chatId, `–ñ–°–ù ${messageText} –±–∞—Ä “õ–æ–ª–¥–∞–Ω—É—à—ã –¥–µ—Ä–µ–∫“õ–æ—Ä–¥–∞ —Ç–∞–±—ã–ª–º–∞–¥—ã.`);
                    userStates[chatId] = { type: null, step: null, iin: null, balance: null }; // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    return;
                } else {
                    client.sendMessage(chatId, changeIINBalance)
                    userStates[chatId].iin = messageText;
                    userStates[chatId].step = "awaitingBalance";
                    return;
                }
            }
            if (userStates[chatId].type === "delete") {
                const user = await User.findOne({iin: messageText})
                if (!user) {
                    client.sendMessage(chatId, `–ñ–°–ù ${messageText} –±–∞—Ä “õ–æ–ª–¥–∞–Ω—É—à—ã –¥–µ—Ä–µ–∫“õ–æ—Ä–¥–∞ —Ç–∞–±—ã–ª–º–∞–¥—ã.`);
                    userStates[chatId] = { type: null, step: null, iin: null, balance: null }; // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    return
                } else {
                    await User.deleteOne({ iin: messageText });
                    client.sendMessage(chatId, delIINRes(user.iin, user.balance));
                    userStates[chatId] = { type: null, step: null, iin: null, balance: null }; // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    return
                }
            }
        } else {
            client.sendMessage(chatId, "–ñ–°–ù —Ñ–æ—Ä–º–∞—Ç—ã –¥“±—Ä—ã—Å –µ–º–µ—Å. 12 —Ç–∞“£–±–∞–ª—ã –ñ–°–ù –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.");
        }
        return;
    }

    if (userStates[chatId].step === "awaitingBalance") {
        if (/^\d+$/.test(messageText)) {
            userStates[chatId].balance = Number(messageText);
            const { type, iin, balance } = userStates[chatId];

            if (type === "add") {
                const newUser = new User({
                    iin,
                    balance
                })
                await newUser.save()
                client.sendMessage(chatId, addIINRes(iin, balance));
            } else {
                const user = await User.findOne({ iin });

                if (!user) {
                    client.sendMessage(chatId, `–ñ–°–ù ${messageText} –±–∞—Ä “õ–æ–ª–¥–∞–Ω—É—à—ã –¥–µ—Ä–µ–∫“õ–æ—Ä–¥–∞ —Ç–∞–±—ã–ª–º–∞–¥—ã.`);
                } else {
                    user.balance = balance
                    await user.save();
                    client.sendMessage(chatId, changeIINRes(iin, balance));
                }
            }

            userStates[chatId] = { type: null, step: null, iin: null, balance: null }; // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        } else {
            client.sendMessage(chatId, "–ë–∞–ª–∞–Ω—Å —Ñ–æ—Ä–º–∞—Ç—ã –¥“±—Ä—ã—Å –µ–º–µ—Å. –°–∞–Ω–¥—ã“õ –º”ô–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.");
        }
        return;
    }

    if (messageText) {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Å—Ç–æ—è—â–µ–µ —Ç–æ–ª—å–∫–æ –∏–∑ 12 —Ü–∏—Ñ—Ä (–ò–ò–ù)
        if (/^\d{12}$/.test(messageText)) {
            const user = await User.findOne({iin: messageText})
            if (!user) {
                client.sendMessage(chatId, notIIN);
                client.sendMessage(chatId, notIIN2);
                return;
            }
            client.sendMessage(chatId, `–°—ñ–∑–¥—ñ“£ –∂–∏–Ω–∞“õ—Ç–∞“ì—ã “õ–∞–∑—ñ—Ä–≥—ñ –±–∞–ª–∞–Ω—Å—ã“£—ã–∑: ${user.balance} —Ç–≥  üí∏`);
            client.sendMessage(chatId, replaceMessage)
            return;
        }

        if (/^\d+$/.test(messageText) && messageText.length !== 12) {
            client.sendMessage(chatId, notIIN);
            client.sendMessage(chatId, notIIN2);
            return;
        }

        client.sendMessage(chatId, "–ë–∞–ª–∞–Ω—Å—ã“£—ã–∑–¥—ã —Ç–µ–∫—Å–µ—Ä—É “Ø—à—ñ–Ω ”©–∑—ñ“£—ñ–∑–¥—ñ“£ –ñ–°–ù –∂–∞–∑—ã“£—ã–∑ üíµ")
        client.sendMessage(chatId, replaceMessage)
    }
});

client.initialize();
